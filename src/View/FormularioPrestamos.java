package View;

import Controller.PrestamosDAO;
import Model.EmpleadoComboItem;
import Model.LibroComboItem;
import Model.Prestamo;
import Model.UsuarioComboItem;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;


public class FormularioPrestamos extends javax.swing.JDialog {
    
    private JComboBox<UsuarioComboItem> cmbUsuarios;
    private JComboBox<LibroComboItem> cmbLibros;
    private JComboBox<EmpleadoComboItem> cmbEmpleados;
    private String Mode;
    private int id;
    private PrestamosDAO dao = new PrestamosDAO();
    private ListadoPrestamos parent;


    public FormularioPrestamos(ListadoPrestamos pParent, boolean modal, String pMode, int pId) {
        super(pParent, modal);
        this.parent = pParent;
        this.Mode = pMode;
        this.id = pId;
        initComponents();
        
        this.setLayout(null);

        cmbUsuarios = new JComboBox<>();
        cmbLibros = new JComboBox<>();
        cmbEmpleados = new JComboBox<>();

        cmbUsuarios.setBounds(255, 90, 200, 25);
        cmbLibros.setBounds(255, 140, 200, 25);
        cmbEmpleados.setBounds(255, 185, 200, 25);
        this.add(cmbUsuarios);
        this.add(cmbLibros);
        this.add(cmbEmpleados);

        cargarUsuarios();
        cargarLibros();
        cargarEmpleados();

        txt_id.setText(String.valueOf(pId));
        txt_id.setEnabled(false);

        if (Mode.equals("INS")) {
            btn_accion.setText("Insertar");
        } else {
            Prestamo prestamo = dao.buscarPorId(id);
            if (prestamo != null) {
                // Seleccionar usuario
                for (int i = 0; i < cmbUsuarios.getItemCount(); i++) {
                    if (cmbUsuarios.getItemAt(i).getId() == prestamo.getUsuarioId()) {
                        cmbUsuarios.setSelectedIndex(i);
                        break;
                    }
                }
                // Seleccionar libro
                for (int i = 0; i < cmbLibros.getItemCount(); i++) {
                    if (cmbLibros.getItemAt(i).getId() == prestamo.getLibroId()) {
                        cmbLibros.setSelectedIndex(i);
                        break;
                    }
                }
                // Seleccionar empleado
                for (int i = 0; i < cmbEmpleados.getItemCount(); i++) {
                    if (cmbEmpleados.getItemAt(i).getId() == prestamo.getEmpleadoId()) {
                        cmbEmpleados.setSelectedIndex(i);
                        break;
                    }
                }
                
                txt_fechaprestamo.setText(prestamo.getFechaPrestamo().toString());
                txt_fechalimite.setText(prestamo.getFechaLimite().toString());

                if (Mode.equals("UPD")) {
                    btn_accion.setText("Actualizar");
                } else if (Mode.equals("DLT")) {
                    cmbUsuarios.setEnabled(false);
                    cmbLibros.setEnabled(false);
                    cmbEmpleados.setEnabled(false);
                    btn_accion.setText("Eliminar");
                }
            }
        }
    }
    
    private void cargarUsuarios() {
        List<UsuarioComboItem> usuarios = dao.obtenerUsuariosParaCombo();
        for (UsuarioComboItem u : usuarios) {
            cmbUsuarios.addItem(u);
        }
    }

    private void cargarLibros() {
        List<LibroComboItem> libros = dao.obtenerLibrosParaCombo();
        for (LibroComboItem l : libros) {
            cmbLibros.addItem(l);
        }
    }

    private void cargarEmpleados() {
        List<EmpleadoComboItem> empleados = dao.obtenerEmpleadosParaCombo();
        for (EmpleadoComboItem e : empleados) {
            cmbEmpleados.addItem(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_id = new javax.swing.JLabel();
        lbl_usuario = new javax.swing.JLabel();
        lbl_libro = new javax.swing.JLabel();
        lbl_empleado = new javax.swing.JLabel();
        lbl_fechaprestamo = new javax.swing.JLabel();
        lbl_fechalimite = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_fechaprestamo = new javax.swing.JTextField();
        txt_fechalimite = new javax.swing.JTextField();
        btn_accion = new javax.swing.JButton();
        btn_salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbl_id.setText("ID:");

        lbl_usuario.setText("Usuario:");

        lbl_libro.setText("Libro:");

        lbl_empleado.setText("Empleado:");

        lbl_fechaprestamo.setText("Fecha Prestamo:");

        lbl_fechalimite.setText("Fecha Limite:");

        btn_accion.setText("Insertar");
        btn_accion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_accionActionPerformed(evt);
            }
        });

        btn_salir.setText("Salir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_fechaprestamo)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbl_empleado)
                        .addComponent(lbl_libro, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lbl_usuario, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lbl_id)
                            .addGap(8, 8, 8)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btn_accion)
                        .addComponent(lbl_fechalimite)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_id)
                            .addComponent(txt_fechaprestamo)
                            .addComponent(txt_fechalimite, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btn_salir)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_id)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lbl_usuario)
                .addGap(33, 33, 33)
                .addComponent(lbl_libro)
                .addGap(31, 31, 31)
                .addComponent(lbl_empleado)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_fechaprestamo)
                    .addComponent(txt_fechaprestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_fechalimite)
                    .addComponent(txt_fechalimite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_accion)
                    .addComponent(btn_salir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_accionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_accionActionPerformed
        // TODO add your handling code here:
        if (Mode.equals("INS")) {
            try {
                String fechaPrestamoTexto = txt_fechaprestamo.getText().trim();
                String fechaLimiteTexto = txt_fechalimite.getText().trim();

                UsuarioComboItem usuarioSeleccionado = (UsuarioComboItem) cmbUsuarios.getSelectedItem();
                LibroComboItem libroSeleccionado = (LibroComboItem) cmbLibros.getSelectedItem();
                EmpleadoComboItem empleadoSeleccionado = (EmpleadoComboItem) cmbEmpleados.getSelectedItem();

                if (fechaPrestamoTexto.isEmpty() || fechaLimiteTexto.isEmpty() ||
                    usuarioSeleccionado == null || libroSeleccionado == null || empleadoSeleccionado == null) {
                    JOptionPane.showMessageDialog(this, "Debe completar todas las fechas y seleccionar usuario, libro y empleado.");
                    return;
                }

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                sdf.setLenient(false);

                java.util.Date fechaPrestamoUtil;
                java.util.Date fechaLimiteUtil;

                try {
                    fechaPrestamoUtil = sdf.parse(fechaPrestamoTexto);
                    fechaLimiteUtil = sdf.parse(fechaLimiteTexto);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Usa yyyy-MM-dd.");
                    return;
                }

                java.sql.Date fechaPrestamoSQL = new java.sql.Date(fechaPrestamoUtil.getTime());
                java.sql.Date fechaLimiteSQL = new java.sql.Date(fechaLimiteUtil.getTime());
                
                if (fechaLimiteSQL.before(fechaPrestamoSQL)) {
                    JOptionPane.showMessageDialog(this, "La fecha límite no puede ser anterior a la fecha de préstamo.");
                    return;
                }

                Prestamo nuevoPrestamo = new Prestamo(0,
                    usuarioSeleccionado.getId(),
                    libroSeleccionado.getId(),
                    empleadoSeleccionado.getId(),
                    fechaPrestamoSQL.toLocalDate(),
                    fechaLimiteSQL.toLocalDate()
                );

                if (dao.insertar(nuevoPrestamo)) {
                    JOptionPane.showMessageDialog(this, "Préstamo insertado correctamente.");
                    parent.refrescarInfo();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo insertar el préstamo.");
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al insertar: " + e.getMessage());
            }
        }

        if (Mode.equals("UPD")) {
            try {
                String fechaPrestamoTexto = txt_fechaprestamo.getText().trim();
                String fechaLimiteTexto = txt_fechalimite.getText().trim();

                UsuarioComboItem usuarioSeleccionado = (UsuarioComboItem) cmbUsuarios.getSelectedItem();
                LibroComboItem libroSeleccionado = (LibroComboItem) cmbLibros.getSelectedItem();
                EmpleadoComboItem empleadoSeleccionado = (EmpleadoComboItem) cmbEmpleados.getSelectedItem();

                if (fechaPrestamoTexto.isEmpty() || fechaLimiteTexto.isEmpty() ||
                    usuarioSeleccionado == null || libroSeleccionado == null || empleadoSeleccionado == null) {
                    JOptionPane.showMessageDialog(this, "Debe completar todas las fechas y seleccionar usuario, libro y empleado.");
                    return;
                }

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                sdf.setLenient(false);

                java.util.Date fechaPrestamoUtil;
                java.util.Date fechaLimiteUtil;

                try {
                    fechaPrestamoUtil = sdf.parse(fechaPrestamoTexto);
                    fechaLimiteUtil = sdf.parse(fechaLimiteTexto);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Usa yyyy-MM-dd.");
                    return;
                }

                java.sql.Date fechaPrestamoSQL = new java.sql.Date(fechaPrestamoUtil.getTime());
                java.sql.Date fechaLimiteSQL = new java.sql.Date(fechaLimiteUtil.getTime());
                
                if (fechaLimiteSQL.before(fechaPrestamoSQL)) {
                    JOptionPane.showMessageDialog(this, "La fecha límite no puede ser anterior a la fecha de préstamo.");
                    return;
                }

                Prestamo prestamoActualizado = new Prestamo(id,
                    usuarioSeleccionado.getId(),
                    libroSeleccionado.getId(),
                    empleadoSeleccionado.getId(),
                    fechaPrestamoSQL.toLocalDate(),
                    fechaLimiteSQL.toLocalDate()
                );

                if (dao.actualizar(prestamoActualizado)) {
                    JOptionPane.showMessageDialog(this, "Préstamo actualizado correctamente.");
                    parent.refrescarInfo();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar el préstamo.");
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
            }
        }

        if (Mode.equals("DLT")) {
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Deseas eliminar este préstamo?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                boolean eliminado = dao.eliminar(id);

                if (eliminado) {
                    JOptionPane.showMessageDialog(this, "Préstamo eliminado correctamente.");
                    parent.refrescarInfo();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el préstamo.");
                }
            }
        }
    }//GEN-LAST:event_btn_accionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormularioPrestamos dialog = new FormularioPrestamos(new ListadoPrestamos(), true,"INS",0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_accion;
    private javax.swing.JButton btn_salir;
    private javax.swing.JLabel lbl_empleado;
    private javax.swing.JLabel lbl_fechalimite;
    private javax.swing.JLabel lbl_fechaprestamo;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_libro;
    private javax.swing.JLabel lbl_usuario;
    private javax.swing.JTextField txt_fechalimite;
    private javax.swing.JTextField txt_fechaprestamo;
    private javax.swing.JTextField txt_id;
    // End of variables declaration//GEN-END:variables
}
