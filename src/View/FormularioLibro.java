package View;

import Controller.CategoriaDAO;
import Controller.EditorialDAO;
import Controller.LibrosDAO;
import Model.Categorias;
import Model.Editorial;
import Model.Libros;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author USUARIO
 */
public class FormularioLibro extends javax.swing.JDialog {
    private String Mode;
    private int id;
    private javax.swing.JComboBox<Model.Categorias> cmbCategoria;
    private javax.swing.JComboBox<Model.Editorial> cmbEditorial;
    private LibrosDAO dao;
    private ListadoLibros parent;


    /**
     * Creates new form FormularioLibro
     */
    public FormularioLibro(ListadoLibros pParent, boolean modal, String pMode, int pId) {
        super(pParent, modal);
        this.parent = pParent;
        initComponents();
        dao = new LibrosDAO();

        
        cmbCategoria = new javax.swing.JComboBox<>(); // crea uno compatible con Categoria
        getContentPane().add(cmbCategoria); // añade al formulario
        cmbCategoria.setBounds(310, 300, 180, 30); // ajusta posición y tamaño (ajústalo según el diseño)
        
        cmbEditorial = new javax.swing.JComboBox<>(); // combo tipo Editorial
        getContentPane().add(cmbEditorial);
        cmbEditorial.setBounds(310, 258, 180, 30); // ajusta las coordenadas según tu diseño

        cargarCategorias();
        cargarEditoriales();
        
        this.Mode = pMode;
        this.id = pId;
        txt_id.setText(String.valueOf(pId));
        if(Mode.equals("INS")){
            btn_Accion.setText("Insertar");
        }else{
            // Cargar libro desde la base de datos (común para UPD y DLT)
            Libros libro = dao.getById(id);

            if (libro != null) {
            txt_id.setText(String.valueOf(libro.getLibroId()));
            txt_titulo.setText(libro.getTituloLibro());
            txt_fecha.setText(libro.getFechaPublicacion().toString());

            // Seleccionar en combo de Editorial
            for (int i = 0; i < cmbEditorial.getItemCount(); i++) {
                if (cmbEditorial.getItemAt(i).getId() == libro.getEditorialId()) {
                    cmbEditorial.setSelectedIndex(i);
                    break;
                }
             }

            // Seleccionar en combo de Categoría
            for (int i = 0; i < cmbCategoria.getItemCount(); i++) {
                if (cmbCategoria.getItemAt(i).getId() == libro.getCategoriaId()) {
                    cmbCategoria.setSelectedIndex(i);
                    break;
                }
            }
        
        if(Mode.equals("UPD")){
            btn_Accion.setText("Actualizar");
        }else if(Mode.equals("DLT")){
            // Deshabilitar campos
            txt_titulo.setEditable(false);
            txt_fecha.setEditable(false);
            cmbEditorial.setEnabled(false);
            cmbCategoria.setEnabled(false);
            btn_Accion.setText("Eliminar");
        }
    }
  }

}
    private void cargarCategorias() {
    CategoriaDAO dao = new CategoriaDAO();
    List<Categorias> categorias = dao.getAllCategorias();

    javax.swing.DefaultComboBoxModel<Categorias> modelo = new javax.swing.DefaultComboBoxModel<>();
    for (Categorias cat : categorias) {
        modelo.addElement(cat);
    }
    cmbCategoria.setModel(modelo);
}
    private void cargarEditoriales() {
    EditorialDAO dao = new EditorialDAO();
    List<Editorial> editoriales = dao.getAllEditoriales();

    javax.swing.DefaultComboBoxModel<Editorial> modelo = new javax.swing.DefaultComboBoxModel<>();
    for (Editorial e : editoriales) {
        modelo.addElement(e);
    }
    cmbEditorial.setModel(modelo);
}

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_titulo = new javax.swing.JTextField();
        txt_fecha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btn_Accion = new javax.swing.JButton();
        btn_salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Titulo Libro:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Fecha Publicacion:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Editorial:");

        txt_id.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_id.setEnabled(false);

        txt_titulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_titulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_tituloActionPerformed(evt);
            }
        });

        txt_fecha.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Categoria:");

        btn_Accion.setText("Insertar");
        btn_Accion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AccionActionPerformed(evt);
            }
        });

        btn_salir.setText("Salir");
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btn_Accion)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(11, 11, 11)
                                    .addComponent(jLabel4)))
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(btn_salir)))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Accion)
                    .addComponent(btn_salir))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_tituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_tituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_tituloActionPerformed

    private void btn_AccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AccionActionPerformed
        // TODO add your handling code here: 
if (Mode.equals("INS")) {
    try {
        String titulo = txt_titulo.getText().trim();
        String fechaTexto = txt_fecha.getText().trim();

        // Validaciones básicas
        if (titulo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El título no puede estar vacío.");
            return;
        }

        if (fechaTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La fecha no puede estar vacía.");
            return;
        }

        // Validar formato de fecha
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false); // No permitir fechas inválidas como 2025-02-30
        java.util.Date fechaUtil;
        try {
            fechaUtil = sdf.parse(fechaTexto);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Usa yyyy-MM-dd.");
            return;
        }

        java.sql.Date fechaSQL = new java.sql.Date(fechaUtil.getTime());

        // Obtener selección de ComboBox
        Categorias catSeleccionada = (Categorias) cmbCategoria.getSelectedItem();
        Editorial editorialSeleccionada = (Editorial) cmbEditorial.getSelectedItem();

        if (catSeleccionada == null || editorialSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una categoría y una editorial.");
            return;
        }

        int categoriaId = catSeleccionada.getId();
        int editorialId = editorialSeleccionada.getId();

        // Crear el objeto libro y enviarlo al DAO
        Libros libro = new Libros(titulo, fechaSQL, editorialId, categoriaId);

        if (dao.insert(libro)) {
            JOptionPane.showMessageDialog(this, "Libro insertado correctamente");
            parent.refrescarInfo();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo insertar el libro");
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al insertar: " + e.getMessage());
    }
}

        if (Mode.equals("UPD")) {
            try {
                Libros libro = new Libros();
                libro.setLibroId(id);
                libro.setTituloLibro(txt_titulo.getText());

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date fechaUtil = sdf.parse(txt_fecha.getText());
                java.sql.Date fechaSQL = new java.sql.Date(fechaUtil.getTime());
                libro.setFechaPublicacion(fechaSQL);

                Editorial editorial = (Editorial) cmbEditorial.getSelectedItem();
                Categorias categoria = (Categorias) cmbCategoria.getSelectedItem();

                libro.setEditorialId(editorial.getId());
                libro.setCategoriaId(categoria.getId());

                dao.update(libro);
                parent.refrescarInfo(); // refrescar tabla
                this.dispose();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
            }
        }
        
        if (Mode.equals("DLT")) {
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Deseas eliminar este libro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
    
            if (confirmacion == JOptionPane.YES_OPTION) {
                int libroId = Integer.parseInt(txt_id.getText());
                boolean eliminado = dao.delete(libroId);
        
                if (eliminado) {
                    JOptionPane.showMessageDialog(this, "Libro eliminado correctamente.");
                    parent.refrescarInfo(); // recarga la tabla en el Listado
                    this.dispose();
                }       
                else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el libro.");
                }
            }
}


    }//GEN-LAST:event_btn_AccionActionPerformed

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_salirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormularioLibro dialog = new FormularioLibro(new ListadoLibros(), true,"INS",0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Accion;
    private javax.swing.JButton btn_salir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_titulo;
    // End of variables declaration//GEN-END:variables
}
