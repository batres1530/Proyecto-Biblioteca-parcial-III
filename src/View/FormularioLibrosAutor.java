package View;

import Controller.LibrosAutoresDAO;
import Model.AutorComboItem;
import Model.LibroComboItem;
import Model.LibrosAutores;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;


public class FormularioLibrosAutor extends javax.swing.JDialog {
    
    private JComboBox<LibroComboItem> cmbLibros;
    private JComboBox<AutorComboItem> cmbAutores;
    private String Mode;
    private int id;
    private LibrosAutoresDAO dao = new LibrosAutoresDAO();
    private ListadoLibrosAutores parent;


    public FormularioLibrosAutor(ListadoLibrosAutores pParent, boolean modal, String pMode, int pId) {
        super(pParent, modal);
        this.parent = pParent;
        this.Mode = pMode;
        this.id = pId;
        initComponents();
        
        this.setLayout(null);
        
        cmbLibros = new JComboBox<>();
        cmbAutores = new JComboBox<>();
        
        cmbLibros.setBounds(170, 120, 200, 25);
        cmbAutores.setBounds(170, 170, 200, 25);
        this.add(cmbLibros);
        this.add(cmbAutores); 

        cargarLibros();
        cargarAutores();
        
        txt_id.setText(String.valueOf(pId));
        txt_id.setEnabled(false);
        
        if (Mode.equals("INS")) {
            btn_accion.setText("Insertar");
        } else {
            LibrosAutores relacion = dao.buscarPorId(id);
            if (relacion != null) {
                // Seleccionar libro
                for (int i = 0; i < cmbLibros.getItemCount(); i++) {
                    LibroComboItem item = cmbLibros.getItemAt(i);
                    if (item.getId() == relacion.getLibroID()) {
                        cmbLibros.setSelectedIndex(i);
                        break;
                    }
                }

                // Seleccionar autor
                for (int i = 0; i < cmbAutores.getItemCount(); i++) {
                    AutorComboItem item = cmbAutores.getItemAt(i);
                    if (item.getId() == relacion.getAutorID()) {
                        cmbAutores.setSelectedIndex(i);
                        break;
                    }
                }

                if (Mode.equals("UPD")) {
                    btn_accion.setText("Actualizar");
                } else if (Mode.equals("DLT")) {
                    cmbLibros.setEnabled(false);
                    cmbAutores.setEnabled(false);
                    btn_accion.setText("Eliminar");
                }
            }
        }
    }
    
    private void cargarLibros() {
        List<LibroComboItem> libros = dao.obtenerLibrosParaCombo();
        for (LibroComboItem libro : libros) {
            cmbLibros.addItem(libro);
        }
    }

    private void cargarAutores() {
        List<AutorComboItem> autores = dao.obtenerAutoresParaCombo();
        for (AutorComboItem autor : autores) {
            cmbAutores.addItem(autor);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_id = new javax.swing.JLabel();
        lbl_libro = new javax.swing.JLabel();
        lbl_autor = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        btn_accion = new javax.swing.JButton();
        btn_salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbl_id.setText("ID:");

        lbl_libro.setText("Libro:");

        lbl_autor.setText("Autor:");

        btn_accion.setText("Insertar");
        btn_accion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_accionActionPerformed(evt);
            }
        });

        btn_salir.setText("Salir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_autor)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbl_id)
                                    .addComponent(lbl_libro))
                                .addGap(26, 26, 26)
                                .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(btn_accion)
                        .addGap(58, 58, 58)
                        .addComponent(btn_salir)))
                .addContainerGap(168, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_id)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(lbl_libro)
                .addGap(35, 35, 35)
                .addComponent(lbl_autor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_accion)
                    .addComponent(btn_salir))
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_accionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_accionActionPerformed
        // TODO add your handling code here:
        if (Mode.equals("INS")) {
            try {
                LibroComboItem libroSeleccionado = (LibroComboItem) cmbLibros.getSelectedItem();
                AutorComboItem autorSeleccionado = (AutorComboItem) cmbAutores.getSelectedItem();

                if (libroSeleccionado == null || autorSeleccionado == null) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar un libro y un autor.");
                    return;
                }

                LibrosAutores nuevaRelacion = new LibrosAutores();
                nuevaRelacion.setLibroID(libroSeleccionado.getId());
                nuevaRelacion.setAutorID(autorSeleccionado.getId());

                if (dao.insert(nuevaRelacion)) {
                    JOptionPane.showMessageDialog(this, "Relación libro-autor insertada correctamente.");
                    parent.refrescarInfo();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo insertar la relación.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al insertar: " + e.getMessage());
            }
        }

        if (Mode.equals("UPD")) {
            try {
                LibroComboItem libroSeleccionado = (LibroComboItem) cmbLibros.getSelectedItem();
                AutorComboItem autorSeleccionado = (AutorComboItem) cmbAutores.getSelectedItem();

                if (libroSeleccionado == null || autorSeleccionado == null) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar un libro y un autor.");
                    return;
                }

                LibrosAutores actualizadaRelacion = new LibrosAutores();
                actualizadaRelacion.setLibroAutorID(id);
                actualizadaRelacion.setLibroID(libroSeleccionado.getId());
                actualizadaRelacion.setAutorID(autorSeleccionado.getId());

                if (dao.update(actualizadaRelacion)) {
                    JOptionPane.showMessageDialog(this, "Relación actualizada correctamente.");
                    parent.refrescarInfo();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar la relación.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
            }
        }

        if (Mode.equals("DLT")) {
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Deseas eliminar esta relación libro-autor?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                boolean eliminado = dao.delete(id);

                if (eliminado) {
                    JOptionPane.showMessageDialog(this, "Relación eliminada correctamente.");
                    parent.refrescarInfo();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar la relación.");
                }
            }
        }

    }//GEN-LAST:event_btn_accionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioLibrosAutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioLibrosAutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioLibrosAutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioLibrosAutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormularioLibrosAutor dialog = new FormularioLibrosAutor(new ListadoLibrosAutores(), true,"INS",0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_accion;
    private javax.swing.JButton btn_salir;
    private javax.swing.JLabel lbl_autor;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_libro;
    private javax.swing.JTextField txt_id;
    // End of variables declaration//GEN-END:variables
}
