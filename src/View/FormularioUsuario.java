package View;

import Controller.TipoUsuarioDAO;
import Controller.UsuariosDAO;
import Model.TipoUsuario;
import Model.Usuarios;
import java.util.List;
import javax.swing.JOptionPane;


public class FormularioUsuario extends javax.swing.JDialog {
    
    private javax.swing.JComboBox<TipoUsuario> cmbTipoUsuario;
    
    private String Mode;
    private int id;
    private UsuariosDAO dao = new UsuariosDAO();
    private ListadoUsuarios parent;


    public FormularioUsuario(ListadoUsuarios pParent, boolean modal, String pMode, int pId) {
        super(pParent, modal);
        this.parent = pParent;
        initComponents();
        this.Mode = pMode;
        this.id = pId;
        
        cmbTipoUsuario = new javax.swing.JComboBox<>();
        cmbTipoUsuario.setBounds(195, 180, 200, 25);
        add(cmbTipoUsuario);
        cargarTipoUsuarios();
        
        txt_id.setText(String.valueOf(pId));
        txt_id.setEnabled(false);

        if (Mode.equals("INS")) {
            btn_accion.setText("Insertar");
        } else {
            Usuarios usuario = dao.buscarPorId(id);
            if (usuario != null) {
                txt_id.setText(String.valueOf(usuario.getId()));
                txt_nombre.setText(usuario.getNombre());
                txt_correo.setText(usuario.getCorreo());

                for (int i = 0; i < cmbTipoUsuario.getItemCount(); i++) {
                    TipoUsuario tipo = cmbTipoUsuario.getItemAt(i);
                    if (tipo.getId() == usuario.getTipoUsuarioId()) {
                        cmbTipoUsuario.setSelectedIndex(i);
                        break;
                    }
                }

                if (Mode.equals("UPD")) {
                    btn_accion.setText("Actualizar");
                } else if (Mode.equals("DLT")) {
                    txt_nombre.setEditable(false);
                    txt_correo.setEditable(false);
                    cmbTipoUsuario.setEnabled(false);
                    btn_accion.setText("Eliminar");
                }
            }
        }
    }
    
     private void cargarTipoUsuarios() {
        TipoUsuarioDAO tipoDAO = new TipoUsuarioDAO();
        List<TipoUsuario> lista = tipoDAO.getAllTipoUsuario();

        cmbTipoUsuario.removeAllItems();
        for (TipoUsuario tipo : lista) {
            cmbTipoUsuario.addItem(tipo); // Se mostrará la descripción por el método toString()
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_id = new javax.swing.JLabel();
        lbl_nombre = new javax.swing.JLabel();
        lbl_correo = new javax.swing.JLabel();
        lbl_tipo = new javax.swing.JLabel();
        btn_accion = new javax.swing.JButton();
        btn_salir = new javax.swing.JButton();
        txt_id = new javax.swing.JTextField();
        txt_nombre = new javax.swing.JTextField();
        txt_correo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbl_id.setText("ID:");

        lbl_nombre.setText("Nombre:");

        lbl_correo.setText("Correo:");

        lbl_tipo.setText("Tipo Usuario:");

        btn_accion.setText("Insertar");
        btn_accion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_accionActionPerformed(evt);
            }
        });

        btn_salir.setText("Salir");
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_tipo)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbl_nombre)
                                    .addComponent(lbl_correo)
                                    .addComponent(lbl_id))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(txt_correo)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(btn_accion)
                        .addGap(69, 69, 69)
                        .addComponent(btn_salir)))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_id)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_nombre)
                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_correo)
                    .addComponent(txt_correo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lbl_tipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_accion)
                    .addComponent(btn_salir))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_accionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_accionActionPerformed
        // TODO add your handling code here:
        if (Mode.equals("INS")) {
            try {
                String nombre = txt_nombre.getText().trim();
                String correo = txt_correo.getText().trim();
                TipoUsuario seleccionado = (TipoUsuario) cmbTipoUsuario.getSelectedItem();

                if (nombre.isEmpty() || correo.isEmpty() || seleccionado == null) {
                    JOptionPane.showMessageDialog(null, "Debe completar todos los campos.");
                    return;
                }

                int tipoId = seleccionado.getId();
                Usuarios nuevo = new Usuarios(nombre, correo, tipoId);

                if (dao.insert(nuevo)) {
                    JOptionPane.showMessageDialog(null, "Usuario insertado correctamente.");
                    parent.refrescarInfo();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo insertar el usuario.");
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al insertar: " + e.getMessage());
            }
        }

        if (Mode.equals("UPD")) {
            try {
                String nombre = txt_nombre.getText().trim();
                String correo = txt_correo.getText().trim();
                TipoUsuario seleccionado = (TipoUsuario) cmbTipoUsuario.getSelectedItem();

                if (nombre.isEmpty() || correo.isEmpty() || seleccionado == null) {
                    JOptionPane.showMessageDialog(null, "Debe completar todos los campos.");
                    return;
                }

                int tipoId = seleccionado.getId();
                Usuarios actualizado = new Usuarios(id, nombre, correo, tipoId);

                if (dao.update(actualizado)) {
                    JOptionPane.showMessageDialog(null, "Usuario actualizado correctamente.");
                    parent.refrescarInfo();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo actualizar el usuario.");
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al actualizar: " + e.getMessage());
            }
        }

        if (Mode.equals("DLT")) {
            int confirmacion = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar este usuario?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                boolean eliminado = dao.delete(id);

                if (eliminado) {
                    JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente.");
                    parent.refrescarInfo();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo eliminar el usuario.");
                }
            }
        }
    }//GEN-LAST:event_btn_accionActionPerformed

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_salirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormularioUsuario dialog = new FormularioUsuario(new ListadoUsuarios(), true,"INS",0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_accion;
    private javax.swing.JButton btn_salir;
    private javax.swing.JLabel lbl_correo;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_nombre;
    private javax.swing.JLabel lbl_tipo;
    private javax.swing.JTextField txt_correo;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_nombre;
    // End of variables declaration//GEN-END:variables
}
